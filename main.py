import os, logging, telebot, time, gspread, re
from datetime import datetime, timedelta
from pprint import pprint
from threading import Thread
from telebot import types
from telebot.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import telebot_calendar
from flask import Flask, request, Response

app = Flask(__name__)


def get_timestamp():
    timestamp = time.strftime("%Y-%m-%d %X")
    return timestamp


# pylint --reports=y text main.py
# https://api.telegram.org/_/setwebhook?url=https://6109-85-93-60-23.ngrok-free.app
@app.route('/', methods=['POST', 'GET'])
def index():
    try:
        if request.headers.get('Content-Type') == 'application/json':
            update = telebot.types.Update.de_json(request.stream.read().decode('utf-8'))
            bot.process_new_updates([update])
            return Response('ok', status=200)
        else:
            return Response('Invalid')
    except Exception as e:
        print("[X]", get_timestamp(), "Error:\n>", e)
        return "Error", 400


API_TOKEN = "_"
logging.basicConfig(level=logging.INFO, filename="py_log.log", filemode="w")
logging.debug("A DEBUG Message")
logging.info("An INFO")
logging.warning("A WARNING")
logging.error("An ERROR")
logging.critical("A message of CRITICAL severity")
telebot.logger.setLevel(logging.DEBUG)

bot = telebot.TeleBot(API_TOKEN)

# –£–∫–∞–∑—ã–≤–∞–µ–º –ø—É—Ç—å –∫ JSON
gc = gspread.service_account(filename='beautysaloon.json')
# –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
sh = gc.open_by_key('_')

print('start bot')


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –≤—ã–±–æ—Ä–æ–º –º–µ–Ω—é
@bot.message_handler(commands=['start'])
def start(message):
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã \U0001FABD", callback_data='my_jobs'))
    keyboard.add(InlineKeyboardButton("–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É \U0001F4C3", callback_data='CALENDAR'))
    keyboard.add(InlineKeyboardButton("Price List \U0001F4B8", callback_data='price'))
    keyboard.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏ \U0001F4D6", callback_data='my_notes'))
    keyboard.add(InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã \U0001F4F1", callback_data='contacts'))
    bot.send_message(message.chat.id,
                     '–ü—Ä–∏–≤–µ—Ç , —è –ú–∞—à–∞ üå∑\n\n–ò —ç—Ç–æ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ –º–Ω–µ –Ω–∞ –Ω–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ —Ä–µ—Å–Ω–∏—Ü  üåø')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ \U0001F447', reply_markup=keyboard)


# –æ–±—Ä–∞–±–∞—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@bot.callback_query_handler(func=lambda call: call.data.startswith("menu"))
def callback_inline(call: CallbackQuery):
    if call.data == "menu":
        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞–±–æ—Ç—ã \U0001FABD", callback_data='my_jobs'))
        keyboard.add(InlineKeyboardButton("–ó–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—É \U0001F4C3", callback_data='CALENDAR'))
        keyboard.add(InlineKeyboardButton("Price List \U0001F4B8", callback_data='price'))
        keyboard.add(InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏ \U0001F4D6", callback_data='my_notes'))
        keyboard.add(InlineKeyboardButton("–ö–æ–Ω—Ç–∞–∫—Ç—ã \U0001F4F1", callback_data='contacts'))
        bot.send_message(
            chat_id=call.from_user.id,
            text=f"–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=keyboard,
        )


# —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–∞—Ç—ã –≤ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
def get_day_of_week(date_str):
    try:
        date_obj = datetime.strptime(date_str, '%d.%m.%Y')
        day_of_week = date_obj.weekday()
        days = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        return days[day_of_week]
    except ValueError:
        return "Invalid date format. Please use dd.mm.YYYY."


lst_date = []
lst = []
lst_work_date = []
# Creates a unique calendar
# calendar = Calendar(language=RUSSIAN_LANGUAGE)
calendar_1_callback = telebot_calendar.CallbackData("calendar_1", "action", "year", "month", "day")

worksheet_list = sh.worksheets()

# —Ä–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –ª–∏—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∑–∞–ø–∏—Å–∏
def parse_list_of_dicts(list_of_dicts):
    result = []
    for d in list_of_dicts:
        parsed_dict = {}
        for key, value in d.items():
            try:
                parsed_value = eval(value)  # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ Python –≤—ã—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–Ω–∞—á–µ–Ω–∏–µ
            except NameError:
                parsed_value = value  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            parsed_dict[key] = parsed_value
        result.append(parsed_dict)
    return result
@bot.callback_query_handler(func=lambda call: call.data.startswith("CALENDAR"))
def callback_inline(call: CallbackQuery):
    """
    Catches a message with the command "start" and sends the calendar

    :return:
    """
    if call.data == "CALENDAR":
        now = datetime.now()  # Get the current date
        count_user = 0
        pattern_search = str(call.from_user.id)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –¥–∞—Ç
        for i in worksheet_list:
            worksheet = sh.worksheet(i.title)
            list_of_dicts = worksheet.get_all_records()
            formatdate = datetime.strptime(i.title, '%d.%m.%Y').date()
            pprint(list_of_dicts)
            for l in list_of_dicts:
                print(l)
                for k, v in l.items():
                    print(v)
                    if v == pattern_search:
                        count_user += 1
                        if count_user >= 2:
                            bot.send_message(
                                        chat_id=call.from_user.id,
                                        text=f"–í–Ω–∏–º–∞–Ω–∏–µ!!! –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∑–∞–ø–∏—Å—å (–Ω–µ –±–æ–ª–µ–µ 2)",
                                        reply_markup=menu_and_buck())
                            break
                    if formatdate >= datetime.now().date() and v == "None":
                        lst.append(formatdate)
                        if i not in lst_work_date:
                            lst_work_date.append(i.title)

            formatdate = datetime.strptime(i.title, '%d.%m.%Y').date()
            if formatdate >= datetime.now().date():
                if i.find("None") == None:
                    lst.append(formatdate)
                    if i not in lst_work_date:
                        lst_work_date.append(i.title)

            pprint(list_of_dicts)
            print(worksheet)
            formatdate = datetime.strptime(i.title, '%d.%m.%Y').date()
            if i.find(pattern_search) == True:
                count_user += 1
                if count_user >= 2:
                    bot.send_message(
                        chat_id=call.from_user.id,
                        text=f"–í–Ω–∏–º–∞–Ω–∏–µ!!! –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –∑–∞–ø–∏—Å—å (–Ω–µ –±–æ–ª–µ–µ 2)",
                        reply_markup=menu_and_buck())
                    break
            if formatdate >= datetime.now().date():
                if i.find("None") == None:
                    lst.append(formatdate)
                    if i not in lst_work_date:
                        lst_work_date.append(i.title)
        count_days = timedelta(days=31)
        end_date = datetime.now() + count_days
        worksheet = sh.get_worksheet(0)
        for i in range((end_date - datetime.now()).days):
            current_date = datetime.today() + timedelta(days=i)
            formatted_date = current_date.strftime('%d.%m.%Y')
            print(173, formatted_date)
            if formatted_date not in lst_work_date:
                worksheet = sh.worksheet("26.01.2024")
                worksheet.copy_to(sh.id)
                print(122, worksheet)
                start_dates = "26.01.2024" + " (–∫–æ–ø–∏—è)"
                print(124)
                worksheet = sh.worksheet(start_dates)
                print(126, worksheet)
                worksheet.update_title(formatted_date)
                if get_day_of_week(formatted_date) == '–í—Å':
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–µ–∫ H1 –∏ I1
                    worksheet.update_cell(1, 4, '11:00')  # D1
                    worksheet.update_cell(1, 5, '14:00')  # E1
                    # –¶–∏–∫–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Å—Ç–æ–ª–±—Ü–µ I –æ—Ç —Å—Ç—Ä–æ–∫–∏ 2 –¥–æ —Å—Ç—Ä–æ–∫–∏ 7
                    for i in range(2, 8):
                        worksheet.update_cell(i, 5, '')  # –ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–æ–ª–±—Ü–µ I
                        worksheet.update_cell(i, 4, '')
                        worksheet.update_cell(i, 8, 1)

        # –ü–æ–ª—É—á–∏—Ç—å  –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —è—á–µ–µ–∫
        cells = [(worksheet.cell(2, i).value, worksheet.cell(1, i).value, f'time1{i}') for i in range(3, 9)]
        print(cells)
        lst_work = [cell[0] for cell in cells]
        print(189, lst_work)
        print(190, worksheet_list)
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text='–í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—É—é –¥–∞—Ç—É:\n ‚úÖ - –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è',
            reply_markup=telebot_calendar.create_calendar(
                name=calendar_1_callback.prefix,
                year=now.year,
                month=now.month,
                lst_current_date=lst
                # Specify the NAME of your calendar
            )
        )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã –∫–∞–ª–µ–Ω–¥–∞—Ä—è
@bot.callback_query_handler(
    func=lambda call: call.data.startswith(calendar_1_callback.prefix)
)
def callback_inline(call: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ inline callback –∑–∞–ø—Ä–æ—Å–æ–≤
    :param call:
    :return:
    """

    # At this point, we are sure that this calendar is ours. So we cut the line by the separator of our calendar
    name, action, year, month, day = call.data.split(calendar_1_callback.sep)
    # Processing the calendar. Get either the date or None if the buttons are of a different type
    date = telebot_calendar.calendar_query_handler(
        bot=bot, call=call, name=name, action=action, year=year, month=month, day=day, lst_currant_date=lst
    )
    # There are additional steps. Let's say if the date DAY is selected, you can execute your code. I sent a message.
    if action == "DAY":
        current_date = datetime.now()
        # –ü—Ä–∏–±–∞–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª  –≤—Ä–µ–º–µ–Ω–∏
        result_date = date + timedelta(hours=current_date.hour, minutes=current_date.minute + 5,
                                       seconds=current_date.second)

        # elif result_date.date() > current_date_now and not all(lst_work):
        #     buttons = [types.InlineKeyboardButton(text=val[1], callback_data=val[2]) for val in cells if
        #                val[0] is None]
        #     buttons.extend([types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        #                     types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='CALENDAR')])
        #     keyboard = types.InlineKeyboardMarkup(row_width=2)
        #     keyboard.add(*buttons)
        #     bot.send_message(
        #         chat_id=call.from_user.id,
        #         text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date.strftime('%d.%m.%Y')}, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ \U0001F553",
        #         reply_markup=keyboard,
        #     )
        #
        # elif result_date.strftime('%d.%m.%Y') == current_date.strftime('%d.%m.%Y'):
        #     buttons = []
        #     for val in cells:
        #         date_string = val[1]
        #     date_format = "%H:%M"
        #     date_object = datetime.strptime(date_string, date_format).hour
        #     current_date_hour = datetime.now().hour
        #     if date_object > current_date_hour and date_object - current_date_hour > 2 and val[0] is None:
        #         buttons.append(types.InlineKeyboardButton(text=val[1], callback_data=val[2]))
        #         buttons.extend([types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        #                         types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='CALENDAR')])
        #         keyboard = types.InlineKeyboardMarkup(row_width=2)
        #         keyboard.add(*buttons)
        #         bot.send_message(
        #             chat_id=call.from_user.id,
        #             text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É: {date.strftime('%d.%m.%Y')}, –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø–∏—Å–∏ \U0001F553",
        #             reply_markup=keyboard,
        #         )
        #
        #     else:
        #         bot.send_message(
        #             chat_id=call.from_user.id,
        #             text=f"–ù–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–º–∏ –¥–∞—Ç—É: {date.strftime('%d.%m.%Y')}, –∑–∞–Ω—è—Ç—ã –≤—Å–µ –º–µ—Å—Ç–∞",
        #             reply_markup=menu_and_buck(),
        #         )
        #


# –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
def get_yes_no_keyboard():
    buttons = [
        types.InlineKeyboardButton(text="–î–∞", callback_data='yes'),
        types.InlineKeyboardButton(text="–ù–µ—Ç", callback_data='no'),
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='know_')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def menu_and_buck():
    buttons = [
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='menu')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


def time_date(name):
    worksheet = sh.worksheet(lst_date[-1])
    time_lst.append(name)
    valc1 = worksheet.cell(1, 3).value
    vald1 = worksheet.cell(1, 4).value
    vale1 = worksheet.cell(1, 5).value
    valf1 = worksheet.cell(1, 6).value
    valg1 = worksheet.cell(1, 7).value
    valh1 = worksheet.cell(1, 8).value
    coord1 = {'time13': ('C2', valc1),
              'time14': ('D2', vald1),
              'time15': ('E2', vale1),
              'time16': ('F2', valf1),
              'time17': ('G2', valg1),
              'time18': ('H2', valh1)}
    return coord1[name]


# –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
key_value = {'time10': ('C2', '10.00')}
name_lst = []
time_lst = []


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("time"))
def callback_inline(call: CallbackQuery):
    key_value['time10'] = time_date(call.data)
    buttons = [
        types.InlineKeyboardButton(text="\U0001F4CD 1D (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç) - 800 —Ä—É–±\n", callback_data='service_1d'),
        types.InlineKeyboardButton(text="\U0001F4CDÔ∏è 2D (–º–æ–∫—Ä—ã–π –ª–∏—Å–∞, –∫—É–∫–ª–∞) - 950 —Ä—É–±\n", callback_data='service_2d'),
        types.InlineKeyboardButton(text="\U0001F4CD 3D (–∫–∞–π–ª–∏, –ª–∏—Å–∞, –∫—É–∫–ª–∞) - 1000 —Ä—É–±\n", callback_data='service_3d'),
        types.InlineKeyboardButton(text="\U0001F4CD –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - 2000 —Ä—É–±\n", callback_data='service_lamination'),
        types.InlineKeyboardButton(text="\U0001F4CDÔ∏è –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–µ—Å–Ω–∏—Ü - 650 —Ä—É–±\n", callback_data='service_correction'),
        types.InlineKeyboardButton(text="* —Å–Ω—è—Ç–∏–µ —á—É–∂–æ–π —Ä–∞–±–æ—Ç—ã - 150 —Ä—É–±\n", callback_data='service_remove'),
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='CALENDAR')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)

    bot.send_message(
        chat_id=call.from_user.id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=keyboard
    )
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    bot.delete_message(call.message.chat.id, call.message.message_id)


key_service = {}


# –æ–±—Ä–∞–±–∞—Ç–∫–∞ –∫–Ω–æ–ø–æ–ø–∫–∏ —É—Å–ª—É–≥–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith("service_"))
def callback_inline(call: CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=time_lst[-1])
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    if call.data == 'service_1d':
        key_service['–£—Å–ª—É–≥–∞'] = '1D (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç)'
    elif call.data == 'service_2d':
        key_service['–£—Å–ª—É–≥–∞'] = '2D (–º–æ–∫—Ä—ã–π –ª–∏—Å–∞, –∫—É–∫–ª–∞)'
    elif call.data == 'service_3d':
        key_service['–£—Å–ª—É–≥–∞'] = '3D (–∫–∞–π–ª–∏, –ª–∏—Å–∞, –∫—É–∫–ª–∞)'
    elif call.data == 'service_lamination':
        key_service['–£—Å–ª—É–≥–∞'] = '–ª–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
        key_service['–ò–∑–≥–∏–±'] = ' '
        key_service['–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ'] = ' '
        buttons = [
            types.InlineKeyboardButton(text="–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–∞–∑", callback_data='know_eye'),
            types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏–Ω–∑—ã", callback_data='know_lenses'),
            types.InlineKeyboardButton(text="–¢–æ–Ω–∫–∏–µ –∏ –ª–æ–º–∫–∏–µ —Ä–µ—Å–Ω–∏—Ü—ã", callback_data='know_brittle'),
            types.InlineKeyboardButton(text="–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", callback_data='know_pregnancy'),
            types.InlineKeyboardButton(text="–õ–∞–∫—Ç–∞—Ü–∏—è", callback_data='know_loctation'),
            types.InlineKeyboardButton(text="–ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–π —Ä–∏–Ω–∏—Ç", callback_data='know_rhinitis'),
            types.InlineKeyboardButton(text="–ö–æ–Ω—ä—é–∫—Ç–∏–≤–∏—Ç", callback_data='know_conjunctivitis'),
            types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data='other'),
            types.InlineKeyboardButton(text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ", callback_data='know_not'),
            types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='bending_')
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        bot.send_message(
            chat_id=call.from_user.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å:",
            reply_markup=keyboard
        )
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    elif call.data == 'service_remove':
        key_service['–£—Å–ª—É–≥–∞'] = '—Å–Ω—è—Ç–∏–µ —á—É–∂–æ–π —Ä–∞–±–æ—Ç—ã'
        key_service['–ò–∑–≥–∏–±'] = ' '
        key_service['–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ'] = ' '
        buttons = [
            types.InlineKeyboardButton(text="–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–∞–∑", callback_data='know_eye'),
            types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏–Ω–∑—ã", callback_data='know_lenses'),
            types.InlineKeyboardButton(text="–¢–æ–Ω–∫–∏–µ –∏ –ª–æ–º–∫–∏–µ —Ä–µ—Å–Ω–∏—Ü—ã", callback_data='know_brittle'),
            types.InlineKeyboardButton(text="–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", callback_data='know_pregnancy'),
            types.InlineKeyboardButton(text="–õ–∞–∫—Ç–∞—Ü–∏—è", callback_data='know_loctation'),
            types.InlineKeyboardButton(text="–ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–π —Ä–∏–Ω–∏—Ç", callback_data='know_rhinitis'),
            types.InlineKeyboardButton(text="–ö–æ–Ω—ä—é–∫—Ç–∏–≤–∏—Ç", callback_data='know_conjunctivitis'),
            types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data='other'),
            types.InlineKeyboardButton(text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ", callback_data='know_not'),
            types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='bending_')
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        bot.send_message(
            chat_id=call.from_user.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å:",
            reply_markup=keyboard
        )
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id)

    elif call.data == 'service_correction':
        key_service['–£—Å–ª—É–≥–∞'] = '–∫–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–µ—Å–Ω–∏—Ü'
        key_service['–ò–∑–≥–∏–±'] = ' '
        key_service['–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ'] = ' '
        buttons = [
            types.InlineKeyboardButton(text="–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–∞–∑", callback_data='know_eye'),
            types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏–Ω–∑—ã", callback_data='know_lenses'),
            types.InlineKeyboardButton(text="–¢–æ–Ω–∫–∏–µ –∏ –ª–æ–º–∫–∏–µ —Ä–µ—Å–Ω–∏—Ü—ã", callback_data='know_brittle'),
            types.InlineKeyboardButton(text="–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", callback_data='know_pregnancy'),
            types.InlineKeyboardButton(text="–õ–∞–∫—Ç–∞—Ü–∏—è", callback_data='know_loctation'),
            types.InlineKeyboardButton(text="–ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–π —Ä–∏–Ω–∏—Ç", callback_data='know_rhinitis'),
            types.InlineKeyboardButton(text="–ö–æ–Ω—ä—é–∫—Ç–∏–≤–∏—Ç", callback_data='know_conjunctivitis'),
            types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data='other'),
            types.InlineKeyboardButton(text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ", callback_data='know_not'),
            types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='bending_')
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        bot.send_message(
            chat_id=call.from_user.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å:",
            reply_markup=keyboard
        )
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
    else:
        buttons = [
            types.InlineKeyboardButton(text="D", callback_data='bending_d'),
            types.InlineKeyboardButton(text="L", callback_data='bending_l'),
            types.InlineKeyboardButton(text="C", callback_data='bending_c'),
            types.InlineKeyboardButton(text="M", callback_data='bending_m'),
            types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=time_lst[-1])
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        bot.send_message(
            chat_id=call.from_user.id,
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑–≥–∏–±:",
            reply_markup=keyboard
        )
        bot.delete_message(call.message.chat.id, call.message.message_id)


# –æ–±—Ä–∞–±–∞—Ç–∫–∞ –∫–Ω–æ–ø–æ–ø–∫–∏ –∏–∑–≥–∏–±
@bot.callback_query_handler(func=lambda call: call.data.startswith("bending_"))
def callback_inline(call: CallbackQuery):
    if call.data == 'bending_d':
        key_service['–ò–∑–≥–∏–±'] = 'D'
    elif call.data == 'bending_l':
        key_service['–ò–∑–≥–∏–±'] = 'L'
    elif call.data == 'bending_c':
        key_service['–ò–∑–≥–∏–±'] = 'M'
    elif call.data == 'bending_m':
        key_service['–ò–∑–≥–∏–±'] = 'C'
    buttons = [
        types.InlineKeyboardButton(text="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö —Ä–µ—Å–Ω–∏—Ü", callback_data='need_—Åolor'),
        types.InlineKeyboardButton(text="–ù–µ –Ω—É–∂–Ω–æ", callback_data='need_other'),
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='service_')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    bot.send_message(
        chat_id=call.from_user.id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:",
        reply_markup=keyboard
    )
    bot.delete_message(call.message.chat.id, call.message.message_id)


# –æ–±—Ä–∞–±–∞—Ç–∫–∞ –∫–Ω–æ–ø–æ–ø–∫–∏ –¥–æ–ø. —É—Å–ª—É–≥–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("need_"))
def callback_inline(call: CallbackQuery):
    if call.data == 'need_—Åolor':
        key_service['–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ'] = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–Ω—ã—Ö —Ä–µ—Å–Ω–∏—Ü'
    elif call.data == 'need_other':
        key_service['–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ'] = '–ù–µ –Ω—É–∂–Ω–æ'
    buttons = [
        types.InlineKeyboardButton(text="–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–∞–∑", callback_data='know_eye'),
        types.InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏–Ω–∑—ã", callback_data='know_lenses'),
        types.InlineKeyboardButton(text="–¢–æ–Ω–∫–∏–µ –∏ –ª–æ–º–∫–∏–µ —Ä–µ—Å–Ω–∏—Ü—ã", callback_data='know_brittle'),
        types.InlineKeyboardButton(text="–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å", callback_data='know_pregnancy'),
        types.InlineKeyboardButton(text="–õ–∞–∫—Ç–∞—Ü–∏—è", callback_data='know_loctation'),
        types.InlineKeyboardButton(text="–ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–π —Ä–∏–Ω–∏—Ç", callback_data='know_rhinitis'),
        types.InlineKeyboardButton(text="–ö–æ–Ω—ä—é–∫—Ç–∏–≤–∏—Ç", callback_data='know_conjunctivitis'),
        types.InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data='other'),
        types.InlineKeyboardButton(text="–ù–∏—á–µ–≥–æ –Ω–µ –Ω—É–∂–Ω–æ", callback_data='know_not'),
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='bending_')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    bot.send_message(
        chat_id=call.from_user.id,
        text=f"–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å:",
        reply_markup=keyboard
    )
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    bot.delete_message(call.message.chat.id, call.message.message_id)


# –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å
@bot.callback_query_handler(func=lambda call: call.data.startswith("know_"))
def callback_inline(call: CallbackQuery):
    buttons = [
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='need_')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    if call.data == 'know_eye':
        key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≥–ª–∞–∑'
    elif call.data == 'know_lenses':
        key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏–Ω–∑—ã'
    elif call.data == 'know_brittle':
        key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = '–¢–æ–Ω–∫–∏–µ –∏ –ª–æ–º–∫–∏–µ —Ä–µ—Å–Ω–∏—Ü—ã'
    elif call.data == 'know_pregnancy':
        key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = '–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å'
    elif call.data == 'know_loctation':
        key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = '–õ–∞–∫—Ç–∞—Ü–∏—è'
    elif call.data == 'know_rhinitis':
        key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = '–ê–ª–ª–µ—Ä–≥–∏—á–µ—Å–∫–∏–π —Ä–∏–Ω–∏—Ç'
    elif call.data == 'know_conjunctivitis':
        key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = '–ö–æ–Ω—ä—é–∫—Ç–∏–≤–∏—Ç'
    elif call.data == 'know_not':
        key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = '–ù–µ –Ω—É–∂–Ω–æ'
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    if key_service['–£—Å–ª—É–≥–∞'] != '—Å–Ω—è—Ç–∏–µ —á—É–∂–æ–π —Ä–∞–±–æ—Ç—ã':
        bot.send_message(
            chat_id=call.from_user.id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {key_value['time10'][1]}\n"
                 f"–£—Å–ª—É–≥–∞ - {key_service['–£—Å–ª—É–≥–∞']}\n"
                 f"–ò–∑–≥–∏–± - {key_service['–ò–∑–≥–∏–±']}\n"
                 f"–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ - {key_service['–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ']}\n"
                 f"–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å - {key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å']}\n"
                 f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
                 f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–∏—Å–∞ 89199559993",
            reply_markup=keyboard

        )
    else:
        bot.send_message(
            chat_id=call.from_user.id,
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {key_value['time10'][1]}\n"
                 f"–£—Å–ª—É–≥–∞ - {key_service['–£—Å–ª—É–≥–∞']}\n"
                 f"–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å - {key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å']}\n"
                 f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
                 f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–∏—Å–∞ 89199559993",
            reply_markup=keyboard

        )

    bot.register_next_step_handler(call.message, valid_name_and_number)


@bot.callback_query_handler(func=lambda call: call.data == 'other')
def callback_inline(call: CallbackQuery):
    if call.data == 'other':
        buttons = [
            types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
            types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='know_')
        ]
        keyboard = types.InlineKeyboardMarkup(row_width=2)
        keyboard.add(*buttons)
        bot.send_message(
            chat_id=call.from_user.id,
            text=f"–í–≤–µ–¥–∏—Ç–µ —á—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å:",
            reply_markup=keyboard
        )
        bot.register_next_step_handler(call.message, save_name)


def save_name(message):
    key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'] = message.text
    bot.reply_to(message, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: {key_value['time10'][1]}\n"
                          f"–£—Å–ª—É–≥–∞ - {key_service['–£—Å–ª—É–≥–∞']}\n"
                          f"–ò–∑–≥–∏–± - {key_service['–ò–∑–≥–∏–±']}\n"
                          f"–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ - {key_service['–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ']}\n"
                          f"–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å - {key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å']}\n"
                          f"–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:\n"
                          f"–ù–∞–ø—Ä–∏–º–µ—Ä: –ê–ª–∏—Å–∞ 89199559993")
    bot.register_next_step_handler(message, valid_name_and_number)


# –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã
def valid_name_and_number(message_any):
    regex = r'^[–ê-–Ø–Å–∞-—è—ë]+\s(8|\+7)\d{10}$'
    result = re.findall(regex, message_any.text)
    if len(lst_date) > 0:
        if result:
            name_lst.append(message_any.text)
            bot.send_message(
                chat_id=message_any.from_user.id,
                text=f'–í—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è {lst_date[-1]}, –Ω–∞ –≤—ã—à–µ—É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è?',
                reply_markup=get_yes_no_keyboard(),
            )
            bot.delete_message(chat_id=message_any.from_user.chat.id, message_id=message_any.message.message_id)

        else:
            bot.send_message(
                chat_id=message_any.from_user.id,
                text=f'–í—ã –≤–≤–µ–ª–∏ –Ω–µ –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø—Ä–∏–º–µ—Ä–æ–º "–ê–ª–∏—Å–∞ 89199559993"',
                reply_markup=get_yes_no_keyboard(),
            )


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ google sheets
@bot.callback_query_handler(func=lambda call: call.data == 'yes')
def callback_inline(call: CallbackQuery):
    if call.data == "yes":
        worksheet = sh.worksheet(lst_date[-1])
        user_id = call.from_user.id
        alphabet_key = key_value['time10'][0][0]
        val_user = alphabet_key + '2'
        worksheet.update(val_user, name_lst[-1])
        val_user_id = alphabet_key + '3'
        worksheet.update(val_user_id, user_id)
        val_service = alphabet_key + '4'
        worksheet.update(val_service, key_service['–£—Å–ª—É–≥–∞'])
        val_bending = alphabet_key + '5'
        val = worksheet.acell(key_value['time10'][0]).value
        try:
            worksheet.update(val_bending, key_service['–ò–∑–≥–∏–±'])
            val_need = alphabet_key + '6'
            worksheet.update(val_need, key_service['–ß—Ç–æ –µ—â–µ –Ω—É–∂–Ω–æ'])
            val_take = alphabet_key + '7'
            worksheet.update(val_take, key_service['–ß—Ç–æ –≤–∞–∂–Ω–æ —É—á–µ—Å—Ç—å'])
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            # bot.send_message(
            #     chat_id=6074853744,
            #     text=f"–ö —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞–ª–∞—Å—å {call.from_user.id}, {lst_date[-1]}, –≤ {key_value['time10'][1]}, {val}, —É—Å–ª—É–≥–∞: {key_service['–£—Å–ª—É–≥–∞']} –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ \U0001F63D",
            #     reply_markup=menu_and_buck()
            # )
            # bot.send_message(
            #     chat_id=call.from_user.id,
            #     text=f"–ó–∞–ø–∏—Å—å, {lst_date[-1]}, –≤ {key_value['time10'][1]}, {val}\n\n–ñ–¥—É —Ç–µ–±—è ‚ù§Ô∏è\n\n–ü–æ –∞–¥—Ä–µ—Å—É : —É–ª.–ó–µ–ª–µ–Ω–∞—è 12 –ì ( –¢–¶ –†—É–±–∏–Ω üíé) \n* 2 —ç—Ç–∞–∂ , –Ω–∞–ø—Ä–∞–≤–æ , —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–±–∏–Ω–µ—Ç —Å –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.",
            # )
            # bot.send_photo(call.message.chat.id, photo=open(f"trends_photo/image2.jpg", 'rb'),
            #                reply_markup=menu_and_buck())

        except Exception as e:
            pass
            # bot.send_message(
            #     chat_id=6074853744,
            #     text=f"–ö —Ç–µ–±–µ –∑–∞–ø–∏—Å–∞–ª–∞—Å—å {call.from_user.id}, {lst_date[-1]}, –≤ {key_value['time10'][1]}, {val}, —É—Å–ª—É–≥–∞: {key_service['–£—Å–ª—É–≥–∞']} –Ω–µ –∑–∞–±—É–¥—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –≥—Ä–∞—Ñ–∏–∫ \U0001F63D",
            #     reply_markup=menu_and_buck()
            # )
            # bot.send_message(
            #     chat_id=call.from_user.id,
            #     text=f"–ó–∞–ø–∏—Å—å, {lst_date[-1]}, –≤ {key_value['time10'][1]}, {val}\n\n–ñ–¥—É —Ç–µ–±—è ‚ù§Ô∏è\n\n–ü–æ –∞–¥—Ä–µ—Å—É : —É–ª.–ó–µ–ª–µ–Ω–∞—è 12 –ì ( –¢–¶ –†—É–±–∏–Ω üíé) \n* 2 —ç—Ç–∞–∂ , –Ω–∞–ø—Ä–∞–≤–æ , —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–±–∏–Ω–µ—Ç —Å –ª–µ–≤–æ–π —Å—Ç–æ—Ä–æ–Ω—ã.",
            #     reply_markup=menu_and_buck(),
            # )
            # bot.send_photo(call.message.chat.id, photo=open(f"trends_photo/image2.jpg", 'rb'),
            #                reply_markup=menu_and_buck())


# –æ—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏ –≤ google sheets
@bot.callback_query_handler(func=lambda call: call.data == 'no')
def callback_inline(call: CallbackQuery):
    try:
        if call.data == "no":
            worksheet = sh.worksheet(lst_date[-1])
            worksheet.update(values=key_value['time10'][0], range_name='')
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
            bot.send_message(
                chat_id=call.from_user.id,
                text=f"–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞",
                reply_markup=menu_and_buck(),
            )
            bot.delete_message(call.message.chat.id, call.message.message_id)
    except:
        bot.send_message(
            chat_id=call.from_user.id,
            text='–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?',
            reply_markup=menu_and_buck(),
        )


alphabet = {0: 'A', 1: 'B', 2: 'C', 3: 'D', 4: 'E', 5: 'F', 6: 'G', 7: 'H', 8: 'I', 9: 'J', 10: 'K', 11: 'L'}

dct_val = {}


# –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ id
@bot.callback_query_handler(func=lambda call: call.data == 'my_notes')
def callback_inline(call: CallbackQuery):
    if call.data == "my_notes":
        worksheets = sh.worksheets()
        datetime_object_now = datetime.now()
        user_id = call.from_user.id
        for worksheet in worksheets:
            date_obj = datetime.strptime(worksheet.title, '%d.%m.%Y')
            if date_obj >= datetime_object_now:
                values_list = worksheet.row_values(3)
                if len(values_list) > 0:
                    for val in enumerate(values_list):
                        if val[1] == str(user_id):
                            coordinate_alphabet = alphabet[val[0]] + '1'
                            val_time = worksheet.acell(coordinate_alphabet).value
                            dct_val.setdefault(date_obj.strftime('%d.%m.%Y'), []).append(val_time)

        if dct_val:
            lst_button = []
            markup = types.InlineKeyboardMarkup(row_width=2)
            for date, times in dct_val.items():
                # Create a callback query button for each date
                lst_button.append(types.InlineKeyboardButton(date, callback_data='date_' + date))
            lst_button.extend([
                types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
                types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='menu')
            ])
            markup.add(*lst_button)
            bot.send_message(
                chat_id=call.from_user.id,
                text=f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞—Ç—ã: \U0001F4D6",
                reply_markup=markup,
            )
        else:
            bot.send_message(
                chat_id=call.from_user.id,
                text=f"–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π \U0001F4D6",
                reply_markup=menu_and_buck(),
            )


@bot.callback_query_handler(func=lambda call: call.data.startswith('date_'))
def handle_date_callback(call):
    date = call.data.split('_')[1]
    times = dct_val[date]
    lst_button = []
    for t in times:
        lst_button.append(types.InlineKeyboardButton(t, callback_data='vrem_' + t))
    lst_button.append(types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'))
    lst_button.append(types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='my_notes'))
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(*lst_button)
    bot.edit_message_text(f"–ù–∞ –¥–∞—Ç—É {date} —É –≤–∞—Å –µ—Å—Ç—å —Å–ª–µ–¥—é—â–∏–µ –∑–∞–ø–∏—Å–∏", call.message.chat.id, call.message.message_id,
                          reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('vrem'))
def handle_time_callback(call):
    times = call.data.split('_')[1]
    # Send a message with the selected time
    bot.send_message(
        chat_id=call.from_user.id,
        text=f'–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞: {times}',
        reply_markup=menu_and_buck(),
    )


@bot.callback_query_handler(func=lambda call: call.data == 'my_jobs')
def handle_time_callback(call):
    buttons = [
        types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu'),
        types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data='menu')
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    bot.send_message(chat_id=call.from_user.id,
                     text=f"–ò–Ω—Å—Ç–∞–≥—Ä–∞–º : https://instagram.com/lashmaker_mary_19\n"
                          f"VK : https://vk.com/club224237512",
                     reply_markup=keyboard)


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã
@bot.callback_query_handler(func=lambda call: call.data == 'contacts')
def handle_time_callback(call):
    bot.send_message(
        chat_id=call.from_user.id,
        text=f"üìû –ú–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: 8-912-365-31-24\n"
             f"üì∑ –ü–æ–¥–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –º–æ–π Instagram: https://instagram.com/lashmaker_mary_19\n"
             f"üåê –ú–æ–π –í–ö–æ–Ω—Ç–∞–∫—Ç–µ: https://vk.com/id500472844\n",
        reply_markup=menu_and_buck()
    )


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–∫–∏ —Ü–µ–Ω
@bot.callback_query_handler(func=lambda call: call.data == 'price')
def handle_time_callback(call):
    markup = telebot.types.InlineKeyboardMarkup()
    back = telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='buck')
    menu = types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')
    trends = types.InlineKeyboardButton(text="–¢—Ä–µ–Ω–¥—ã 2024", callback_data='trends')
    markup.row(trends, back, menu)
    bot.send_message(
        chat_id=call.from_user.id,
        text=f"\U0001F4CD 1D (–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç) - 1000 —Ä—É–±\n\n"
             f"\U0001F4CDÔ∏è 2D (–º–æ–∫—Ä—ã–π –ª–∏—Å–∞, –∫—É–∫–ª–∞) - 1200 —Ä—É–±\n\n"
             f"\U0001F4CD 3D (–∫–∞–π–ª–∏, –ª–∏—Å–∞, –∫—É–∫–ª–∞) - 1400 —Ä—É–±\n\n"
             f"\U0001F4CDÔ∏è –ª—É—á–∏  + 500 —Ä—É–±\n\n"
             f"\U0001F4CDÔ∏è –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–µ—Å–Ω–∏—Ü - 700 —Ä—É–±\n\n"
             f" * —Å–Ω—è—Ç–∏–µ —á—É–∂–æ–π —Ä–∞–±–æ—Ç—ã - 300 —Ä—É–±\n\n",
        reply_markup=markup
    )


# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
photo_path_trends = 'trends_photo'

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏
images_trends = [file for file in os.listdir(photo_path_trends) if file.endswith('.jpg')]

current_index_trends = 0


@bot.callback_query_handler(func=lambda call: call.data == 'trends')
def handle_time_callback(call):
    show_image_trends(call.message.chat.id)


@bot.callback_query_handler(func=lambda call: call.data in ['first', 'two'])
def change_image(callback_query):
    global current_index_trends
    if callback_query.data == 'prev':
        current_index_trends = (current_index_trends - 1) % len(images_trends)
    else:
        current_index_trends = (current_index_trends + 1) % len(images_trends)
    show_image_trends(callback_query.message.chat.id)
    bot.answer_callback_query(callback_query.id)


def show_image_trends(chat_id):
    image = images_trends[current_index_trends]
    markup = telebot.types.InlineKeyboardMarkup()
    prev_button = telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='first')
    next_button = telebot.types.InlineKeyboardButton('–í–ø–µ—Ä–µ–¥', callback_data='two')
    menu = types.InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='menu')
    markup.row(prev_button, next_button, menu)
    bot.send_photo(chat_id, photo=open(f"trends_photo/{image}", 'rb'), reply_markup=markup)


# —Å–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –∑–∞–ø–∏—Å–∏
def obnulenie():
    while True:
        time.sleep(24 * 60 * 60)
        # –≤—ã–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
        worksheet_list = sh.worksheets()
        lst_work = [i.title for i in worksheet_list]
        date_now = datetime.now()
        new_date = date_now + timedelta(days=1)
        next_day = new_date.strftime('%d.%m.%Y')
        if next_day in lst_work:
            worksheet = sh.worksheet(next_day)
            values_list = worksheet.row_values(3)  # –≤—ã–±–∏—Ä–∞–µ–º —Ç—Ä–µ—Ç—å—é —Å—Ç—Ä–æ–∫—É –≤ –¥–∞—Ç–µ
            for val in enumerate(values_list):
                if val[1] != '' and val[1] != '   id_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
                    chat_id = int(val[1])
                    coordinate_alphabet = alphabet[val[0]] + '1'
                    val_time = worksheet.acell(coordinate_alphabet).value
                    bot.send_message(
                        chat_id=chat_id,
                        text=f"–í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ {val_time}"
                    )


thread1 = Thread(target=obnulenie, args=())  # —Å–æ–∑–¥–∞—ë–º –ø–æ—Ç–æ–∫
thread1.start()  # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫

if __name__ == '__main__':
    app.run(debug=True)
    # bot.remove_webhook()
    # bot.set_webhook(url='194.87.199.180:8443', certificate=open('url_cert.pem', 'rb'))
    # app.run(host='0.0.0.0', port=8443, ssl_context=('url_cert.pem', 'usrl_private.key'))
